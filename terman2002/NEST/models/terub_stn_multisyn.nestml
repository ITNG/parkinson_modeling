"""
Name: terub_stn_multisyn - Terman Rubin neuron model.

Description:

  terub_stn_multisyn is an implementation of a spiking neuron using the Terman Rubin model
  based on the Hodgkin-Huxley formalism.


Spike Detection
  Spike detection is done by a combined threshold-and-local-maximum search: if there
  is a local maximum above a certain threshold of the membrane potential, it is considered a spike.

References:
  Terman, D. and Rubin, J.E. and Yew, A.C. and Wilson, C.J.
  Activity Patterns in a Model for the Subthalamopallidal Network
  of the Basal Ganglia
  The Journal of Neuroscience, 22(7), 2963-2976 (2002)

  Rubin, J.E. and Terman, D.
  High Frequency Stimulation of the Subthalamic Nucleus Eliminates
  Pathological Thalamic Rhythmicity in a Computational Model
  Journal of Computational Neuroscience, 16, 211-235 (2004)


Sends: SpikeEvent

Receives: SpikeEvent, CurrentEvent, DataLoggingRequest

Author: Abolfazl Ziaeemehr
"""
neuron terub_stn_multisyn:
  state:
    r integer # counts number of tick during the refractory period
  end

  initial_values:
    V_m mV = E_L #  Membrane potential
    gate_h real = 0.0 # gating variable h
    gate_n real = 0.0 # gating variable n
    gate_r real = 0.0 # gating variable r
    Ca_con real = 0.0 # gating variable r

    g_AMPA nS = 0.0 nS
    g_AMPA' nS/ms = 0.0 nS/ms

    g_NMDA nS = 0.0 nS 
    g_NMDA' nS/ms = 0.0 nS/ms 

    g_GABAA nS = 0.0 nS
    g_GABAA' nS/ms = 0.0 nS/ms
    
    g_GABAB nS = 0.0 nS 
    g_GABAB' nS/ms = 0.0 nS/ms
  end

  equations:
    #Parameters for Terman Rubin STN Neuron

    recordable function I_syn_ampa pA = -g_AMPA * ( V_m - AMPA_E_rev )
    recordable function I_syn_nmda pA = -g_NMDA * ( V_m - NMDA_E_rev ) / ( 1 + exp( ( NMDA_Vact - V_m ) / NMDA_Sact ) )
    recordable function I_syn_gaba_a pA = -g_GABAA * ( V_m - GABA_A_E_rev )
    recordable function I_syn_gaba_b pA = -g_GABAB * ( V_m - GABA_B_E_rev )
    recordable function I_syn pA = I_syn_ampa + I_syn_nmda + I_syn_gaba_a + I_syn_gaba_b      

    #time constants for slow gating variables
    function tau_n_0 ms = 1.0 ms
    function tau_n_1 ms = 100.0 ms
    function theta_n_tau mV = -80.0 mV
    function sigma_n_tau mV = -26.0 mV

    function tau_h_0 ms = 1.0 ms
    function tau_h_1 ms = 500.0 ms
    function theta_h_tau mV = -57.0 mV
    function sigma_h_tau mV = -3.0 mV

    function tau_r_0 ms = 7.1 ms # Guo 7.1 Terman02 40.0
    function tau_r_1 ms = 17.5 ms
    function theta_r_tau mV = 68.0 mV
    function sigma_r_tau mV = -2.2 mV

    #steady state values for gating variables
    function theta_a mV = -63.0 mV
    function sigma_a mV = 7.8 mV
    function theta_h mV = -39.0 mV
    function sigma_h mV = -3.1 mV
    function theta_m mV = -30.0 mV
    function sigma_m mV = 15.0 mV
    function theta_n mV = -32.0 mV
    function sigma_n mV = 8.0 mV
    function theta_r mV = -67.0 mV
    function sigma_r mV = -2.0 mV
    function theta_s mV = -39.0 mV
    function sigma_s mV = 8.0 mV

    function theta_b real = 0.25 # Guo 0.25 Terman02 0.4
    function sigma_b real = 0.07 # Guo 0.07 Terman02 -0.1

    #time evolvement of gating variables
    function phi_h real = 0.75
    function phi_n real = 0.75
    function phi_r real = 0.5 # Guo 0.5 Terman02 0.2

    # Calcium concentration and afterhyperpolarization current
    function epsilon 1/ms = 0.00005 / ms # 1/ms Guo 0.00005 Terman02 0.0000375
    function k_Ca real = 22.5
    function k1 real = 15.0

    # function I_ex_mod pA = -convolve(g_ex, spikeExc) * V_m
    # function I_in_mod pA = convolve(g_in, spikeInh) * (V_m - E_gs)

    function tau_n ms = tau_n_0 + tau_n_1/(1.+exp(-(V_m-theta_n_tau)/sigma_n_tau))
    function tau_h ms = tau_h_0 + tau_h_1/(1.+exp(-(V_m-theta_h_tau)/sigma_h_tau))
    function tau_r ms = tau_r_0 + tau_r_1/(1.+exp(-(V_m-theta_r_tau)/sigma_r_tau))

    function a_inf real = 1./(1. + exp(-(V_m-theta_a)/sigma_a))
    function h_inf real = 1./(1. + exp(-(V_m-theta_h)/sigma_h));
    function m_inf real = 1./(1. + exp(-(V_m-theta_m)/sigma_m))
    function n_inf real = 1./(1. + exp(-(V_m-theta_n)/sigma_n))
    function r_inf real = 1./(1. + exp(-(V_m-theta_r)/sigma_r))
    function s_inf real = 1./(1. + exp(-(V_m-theta_s)/sigma_s))
    function b_inf real = 1./(1. + exp((gate_r-theta_b)/sigma_b))-1./(1.+exp(-theta_b/sigma_b))

    function I_Na  pA =  g_Na  * m_inf * m_inf * m_inf * gate_h    * (V_m - E_Na)
    function I_K   pA =  g_K   * gate_n * gate_n * gate_n * gate_n * (V_m - E_K )
    function I_T   pA =  g_T   * a_inf * a_inf * a_inf * b_inf*b_inf*(V_m - E_Ca)
    function I_L   pA =  g_L                                 * (V_m - E_L )
    function I_Ca  pA =  g_Ca  * s_inf * s_inf               * (V_m - E_Ca)
    function I_ahp pA =  g_ahp * (Ca_con / (Ca_con + k1))    * (V_m - E_K )

    # V dot -- synaptic input are currents, inhib current is negative
    V_m' = ( -(I_Na + I_K + I_L + I_T + I_Ca + I_ahp) + I_e + I_stim + I_syn) / C_m

    #channel dynamics
    gate_h' = phi_h *((h_inf-gate_h) / tau_h)  # h-variable
    gate_n' = phi_n *((n_inf-gate_n) / tau_n)  # n-variable
    gate_r' = phi_r *((r_inf-gate_r) / tau_r)  # r-variable

    #Calcium concentration
    Ca_con' = epsilon*( (-I_Ca  - I_T ) / pA - k_Ca * Ca_con)

    #############
    # Synapses
    #############
    
    g_AMPA'' = -g_AMPA' / AMPA_Tau_1
    g_AMPA' = g_AMPA' - g_AMPA  / AMPA_Tau_2

    g_NMDA'' = -g_NMDA' / NMDA_Tau_1
    g_NMDA' = g_NMDA' - g_NMDA / NMDA_Tau_2

    g_GABAA'' = -g_GABAA' / GABA_A_Tau_1
    g_GABAA' = g_GABAA' - g_GABAA / GABA_A_Tau_2

    g_GABAB'' = -g_GABAB' / GABA_B_Tau_1
    g_GABAB' = g_GABAB' - g_GABAB /GABA_B_Tau_2

    # synapses: alpha functions
    ## alpha function for the g_in and g_ex
    # shape g_in = (e/tau_syn_in) * t * exp(-t/tau_syn_in)
    # shape g_ex = (e/tau_syn_ex) * t * exp(-t/tau_syn_ex)
  end

  parameters:
    E_L        mV = -60. mV  # Resting membrane potential.
    g_L        nS = 2.25 nS # Leak conductance.
    C_m        pF = 1.0 pF # Capacity of the membrane.
    E_Na       mV = 55. mV   # Sodium reversal potential.
    g_Na       nS = 37.5 nS # Sodium peak conductance.
    E_K        mV = -80.0 mV# Potassium reversal potential.
    g_K        nS = 45.0 nS # Potassium peak conductance.
    E_Ca       mV = 140. mV  # Calcium reversal potential.
    g_Ca       nS = 0.5 nS  # Calcium peak conductance.
    g_T        nS = 0.5 nS  # T-type Calcium channel peak conductance.
    g_ahp      nS = 9. nS    # afterpolarization current peak conductance.
    # tau_syn_ex ms = 1.0 ms  # Rise time of the excitatory synaptic alpha function.
    # tau_syn_in ms = 0.08 ms # Rise time of the inhibitory synaptic alpha function.
    E_gs       mV = -85.0 mV# reversal potential for inhibitory input (from GPe)
    t_ref      ms = 2. ms    # refractory time

    # Parameters for synapse of type AMPA, GABA_A, GABA_B and NMDA
    AMPA_g_peak nS = 0.1 nS      # peak conductance
    AMPA_E_rev mV = 0.0 mV       # reversal potential
    AMPA_Tau_1 ms = 0.5 ms       # rise time
    AMPA_Tau_2 ms = 2.4 ms       # decay time, Tau_1 < Tau_2
    
    NMDA_g_peak nS = 0.075 nS    # peak conductance
    NMDA_Tau_1 ms = 4.0 ms       # rise time
    NMDA_Tau_2 ms = 40.0 ms      # decay time, Tau_1 < Tau_2
    NMDA_E_rev mV = 0.0 mV       # reversal potential
    NMDA_Vact mV = -58.0 mV      # inactive for V << Vact, inflection of sigmoid
    NMDA_Sact mV = 2.5 mV        # scale of inactivation
    
    GABA_A_g_peak nS = 0.33 nS   # peak conductance
    GABA_A_Tau_1 ms = 1.0 ms     # rise time
    GABA_A_Tau_2 ms = 7.0 ms     # decay time, Tau_1 < Tau_2
    GABA_A_E_rev mV = -85.0 mV   # reversal potential
    
    GABA_B_g_peak nS = 0.0132 nS # peak conductance
    GABA_B_Tau_1 ms = 60.0 ms    # rise time
    GABA_B_Tau_2 ms = 200.0 ms   # decay time, Tau_1 < Tau_2
    GABA_B_E_rev mV = -90.0 mV   # reversal potential for intrinsic current

    # constant external input current
    I_e pA = 0. pA
  end

  internals:

    AMPAInitialValue real = compute_synapse_constant( AMPA_Tau_1, AMPA_Tau_2, AMPA_g_peak )
    NMDAInitialValue real = compute_synapse_constant( NMDA_Tau_1, NMDA_Tau_2, NMDA_g_peak )
    GABA_AInitialValue real = compute_synapse_constant( GABA_A_Tau_1, GABA_A_Tau_2, GABA_A_g_peak )
    GABA_BInitialValue real = compute_synapse_constant( GABA_B_Tau_1, GABA_B_Tau_2, GABA_B_g_peak )
    RefractoryCounts integer = steps(t_ref) # refractory time in steps
  end

  input:
    # spikeInh nS <- inhibitory spike
    # spikeExc nS <- excitatory spike
    # I_stim pA <- current
    AMPA nS  <- spike
    NMDA nS  <- spike
    GABA_A nS <- spike
    GABA_B nS <- spike
    I_stim pA <- current
  end

  output: spike

  update:
    U_old mV = V_m
    integrate_odes()

    g_AMPA' += AMPAInitialValue * AMPA /ms
    g_NMDA' += NMDAInitialValue * NMDA /ms
    g_GABAA' += GABA_AInitialValue * GABA_A /ms
    g_GABAB' += GABA_BInitialValue * GABA_B /ms

    # sending spikes: crossing 0 mV, pseudo-refractoriness and local maximum...
    if r > 0:
      r -= 1
    elif V_m > 0 mV and U_old > V_m:
      r = RefractoryCounts
      emit_spike()
    end

  end

  function compute_synapse_constant(Tau_1 ms, Tau_2 ms, g_peak real) real:
    # Factor used to account for the missing 1/((1/Tau_2)-(1/Tau_1)) term
    # in the ht_neuron_dynamics integration of the synapse terms.
    # See: Exact digital simulation of time-invariant linear systems
    # with applications to neuronal modeling, Rotter and Diesmann,
    # section 3.1.2.
    exact_integration_adjustment real = ( ( 1 / Tau_2 ) - ( 1 / Tau_1 ) ) * ms

    t_peak real = ( Tau_2 * Tau_1 ) * ln( Tau_2 / Tau_1 ) / ( Tau_2 - Tau_1 ) / ms
    normalisation_factor real = 1 / ( exp( -t_peak / Tau_1 ) - exp( -t_peak / Tau_2 ) )

    return g_peak * normalisation_factor * exact_integration_adjustment
  end

end
